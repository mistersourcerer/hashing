require "hashing/version"
require "hashing/ivar"

module Hashing
  class UnconfiguredIvar < StandardError
    def initialize(ivar_name, class_name)
      super "The Hash has a :#{ivar_name} key, "+
        "but no @#{ivar_name} was configured in #{class_name}"
    end
  end
  # Inject the public api into the client class.
  #
  # @since 0.0.1
  #
  # @example including Hashing
  #   require 'hashing'
  #
  #   class File
  #     include Hashing
  #     hasherize :path, :commit
  #
  #     def initialize(path, commit)
  #       @path, @commit = path, commit
  #     end
  #   end
  #
  # When `Hashing` is included, the host class will gain the `.from_hash({})`
  # method and the `#to_h` instance method.
  # Another method that will be added is the private class method `.hasherize`
  # will be added so you can indicate what ivars do you want in your sarialized
  # objects.
  def self.included(client_class)
    client_class.extend Hasherizer
  end

  # The `Hash` returned by `#to_h` will be formed by keys based on the ivars
  # names passed to `hasherize` method.
  #
  # @example File hahserized (which include `Hashing`)
  #
  #   file = File.new 'README.md', 'cfe9aacbc02528b'
  #   file.to_h
  #   # => { path: 'README.md', commit: 'cfe9aacbc02528b' }
  def to_h
    hash_pairs = self.class.ivars.map { |ivar|
      [ivar.to_sym, ivar.to_h(instance_variable_get "@#{ivar}")]
    }
    Hash[hash_pairs]
  end

  # Define the class methods that should be available in a 'hasherized ®' class
  # (a class that include `Hashing`).
  module Hasherizer

    # Configures which instance variables will be used to compose the `Hash`
    # generated by `#to_h`
    #
    # @api
    # @param ivars [*arguments]
    def hasherize(*ivars_and_options)
      @ivars ||= []
      ivars = extract_ivars ivars_and_options
      to_strategy = extract_to_hash_strategy ivars_and_options
      from_strategy = extract_from_hash_strategy ivars_and_options
      @ivars += ivars.map { |ivar| Ivar.new ivar, to_strategy, from_strategy }
    end

    # Configures the strategy to (re)create an instance of the 'hasherized ®'
    # class based on a `Hash` instance. This strategy will be used by the
    # `.from_hash({})` method.
    #
    # This configuration is optional, if it's not called, then the strategy will
    # be just repassing the `Hash` to the initializer.
    #
    # @param strategy [#call]
    # @return void
    def loading(strategy)
      @strategy = strategy
    end

    # Provides the default strategy for recreate objects from hashes (which is
    # just call .new passing the `Hash` as is.
    #
    # @return the result of calling the strategy
    def strategy
      @strategy || ->(h) { new h }
    end
    private :hasherize, :loading, :strategy

    # provides access to the current configuration on what `ivars` should be
    # used to generate a `Hash` representation of instances of the client class.
    #
    # @return [Array] ivars that should be included in the final Hash
    def ivars
      @ivars ||= []
    end

    # Receives a `Hash` and uses the strategy configured by `.loading` to
    # (re)create an instance of the 'hasherized ®' class.
    #
    # @param pairs [Hash] in a valid form defined by `.hasherize`
    # @return new object
    def from_hash(pairs)
      hash_to_load = {}
      pairs.each do |ivar_name, value|
        ivar = ivars.select { |ivar| ivar.to_sym == ivar_name.to_sym }.first
        raise UnconfiguredIvar.new ivar_name, name unless ivar
        hash_to_load[ivar.to_sym] = ivar.from_hash value
      end
      strategy.call hash_to_load
    end

    private
    def extract_ivars(ivars_and_options)
      if ivars_and_options.last.is_a? Hash
        [ivars_and_options.first]
      else
        ivars_and_options
      end
    end

    def strategy_for_key(ivars_and_options, hash_key)
      # default transformation strategy
      strategies = { hash_key.to_sym =>  ->(ivar_value) { ivar_value } }
      strategies = ivars_and_options.last if ivars_and_options.last.is_a? Hash
      strategies[hash_key.to_sym]
    end

    def extract_to_hash_strategy(ivars_and_options)
      strategy_for_key ivars_and_options, :to_hash
    end

    def extract_from_hash_strategy(ivars_and_options)
      strategy_for_key ivars_and_options, :from_hash
    end
  end
end
